name: Deploy to Firebase Hosting on merge
permissions:
  id-token: write
  contents: write
  attestations: write
on:
  push:
    branches:
      - main
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      attestations: write
      id-token: write  
    steps:
      - uses: actions/checkout@v4

      # Install dependencies and run ESLint
      - name: Run ESLint
        run: |
          npm ci
          npx eslint . --format json -o eslint-report.json

      # Upload ESLint results (artifact only; release upload comes later)
      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-report.json

      # Extract version from package.json and add build number
      - name: Compute unique version
        id: version
        run: |
          PKG_VERSION=$(jq -r .version package.json)
          BUILD_NUMBER="${{ github.run_number }}"
          UNIQUE_VERSION="${PKG_VERSION}.${BUILD_NUMBER}"
          echo "UNIQUE_VERSION=$UNIQUE_VERSION" >> $GITHUB_ENV
          echo "unique_version=$UNIQUE_VERSION" >> $GITHUB_OUTPUT

      # Build the project
      - name: Build project
        run: npm run build

      # Zip the dist/ directory with version in the filename
      - name: Zip release artifact
        run: zip -r "dist-${{ env.UNIQUE_VERSION }}.zip" dist/

      # Upload zipped build artifact (artifact only; release upload comes later)
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: "release-artifact-${{ env.UNIQUE_VERSION }}"
          path: "dist-${{ env.UNIQUE_VERSION }}.zip"

      # Create attestation for zipped build artifact
      - name: Attest build artifact provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "dist-${{ env.UNIQUE_VERSION }}.zip"

      # Create GitHub release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ env.UNIQUE_VERSION }}"
          release_name: "Release ${{ env.UNIQUE_VERSION }}"
          draft: false
          prerelease: false

      # Upload zipped build artifact to release
      - name: Upload Release Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "dist-${{ env.UNIQUE_VERSION }}.zip"
          asset_name: "dist-${{ env.UNIQUE_VERSION }}.zip"
          asset_content_type: application/zip

      # Upload attestation file to release
      - name: Upload Attestation to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "attestation.json"
          asset_name: "attestation.json"
          asset_content_type: application/json
        # Ensure attestation output file path matches your attestation step

      # Upload ESLint report to release
      - name: Upload ESLint Report to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "eslint-report.json"
          asset_name: "eslint-report.json"
          asset_content_type: application/json

      # Deploy to Firebase Hosting
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_COOP_PI }}
          channelId: live
          projectId: coop-pi
