/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { HttpResponse, http } from "msw";
import { faker } from "@faker-js/faker";

faker.seed(1);

const baseURL = "";
const MAX_ARRAY_LENGTH = 20;

// Map to store counters for each API endpoint
const apiCounters = new Map<string, number>();

const next = (apiKey: string) => {
  let currentCount = apiCounters.get(apiKey) ?? 0;
  if (currentCount === Number.MAX_SAFE_INTEGER - 1) {
    currentCount = 0;
  }
  apiCounters.set(apiKey, currentCount + 1);
  return currentCount;
};

export const handlers = [
  http.post(`${baseURL}/door`, async () => {
    const resultArray = [
      [getCoopDoorDoorPost200Response(), { status: 200 }],
      [getCoopDoorDoorPost422Response(), { status: 422 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`post /door`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/door-state`, async () => {
    const resultArray = [
      [getDoorStateDoorStateGet200Response(), { status: 200 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`get /door-state`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/lights`, async () => {
    const resultArray = [
      [getLightsLightsPost200Response(), { status: 200 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`post /lights`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/light-state`, async () => {
    const resultArray = [
      [getLightStateLightStateGet200Response(), { status: 200 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`get /light-state`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/capture`, async () => {
    const resultArray = [
      [getCaptureImageCapturePost200Response(), { status: 200 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`post /capture`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/temperature`, async () => {
    const resultArray = [
      [getReadTemperatureTemperatureGet200Response(), { status: 200 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`get /temperature`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/latest-image`, async () => {
    const resultArray = [
      [getLatestImageLatestImageGet200Response(), { status: 200 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`get /latest-image`) % resultArray.length],
    );
  }),
];

export function getCoopDoorDoorPost200Response() {
  return null;
}

export function getCoopDoorDoorPost422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getDoorStateDoorStateGet200Response() {
  return null;
}

export function getLightsLightsPost200Response() {
  return null;
}

export function getLightStateLightStateGet200Response() {
  return null;
}

export function getCaptureImageCapturePost200Response() {
  return null;
}

export function getReadTemperatureTemperatureGet200Response() {
  return null;
}

export function getLatestImageLatestImageGet200Response() {
  return null;
}
